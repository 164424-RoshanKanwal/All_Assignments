package com.streamAssignments;

import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class FruitsStreams {

	public static void main(String[] args) {
		FruitsList fruitsList = new FruitsList();
		List<Fruits> fruits = fruitsList.getFruits();
		
/*		List<Fruits> fruitsWithCaloriesLessThan100InDescOrder = 
				fruits.stream()
									.filter(fruit -> fruit.getCalories()<100)
									.sorted(Comparator.comparing(Fruits::getCalories))
									.collect(Collectors.toList());
		
		System.out.println(fruitsWithCaloriesLessThan100InDescOrder);*/
		
		
		
		/*List<String> fruitsColor = fruits.stream()
				.sorted(Comparator.comparing(Fruits::getColor))
				.map(fruit -> fruit.getName() + " is " + fruit.getColor())		//---2
				.collect(Collectors.toList());
		System.out.println(fruitsColor);
		*/
		
		
		/*List<Fruits> fruitsRed = fruits.stream().filter(fruit -> fruit.getColor().equalsIgnoreCase("red"))
										.sorted(Comparator.comparing(Fruits::getPrice))		//---3
										.collect(Collectors.toList());
		
		System.out.println(fruitsRed);*/
		
		
		NewsList listsOfNews = new NewsList();
		List<News> lNews = listsOfNews.getAllNews();

		Map<Integer, Long> map = lNews.stream().map(s -> s.getNewsId()).collect(Collectors.groupingBy(Function.identity(),
				Collectors.counting()));
		System.out.println(map);
		
		
		
		
	}
	
}
